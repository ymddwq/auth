<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//log4j/log4j Configuration//EN" "log4j.dtd">
<log4j:configuration>
    <!-- ========================== 自定义输出格式说明================================ -->  
    <!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->  
    <!-- %r 输出自应用启动到输出该log信息耗费的毫秒数  -->  
    <!-- %c 输出所属的类目，通常就是所在类的全名 -->  
    <!-- %t 输出产生该日志事件的线程名 -->  
    <!-- %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” -->  
    <!-- %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->  
    <!-- %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)  -->  
    <!-- ========================================================================== -->  
    
    <!-- ========================== 输出方式说明================================ -->  
    <!-- Log4j提供的appender有以下几种:  -->  
    <!-- org.apache.log4j.ConsoleAppender(控制台),  -->  
    <!-- org.apache.log4j.FileAppender(文件),  -->  
    <!-- org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件), -->  
    <!-- org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),  -->  
    <!-- org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)   -->  
     <!-- ========================================================================== -->  
    
 
    <!--输出到控制台-->
    <appender name="consoleAppender" class="org.apache.log4j.ConsoleAppender">
        <!--Threshold是个全局的过滤器，他将把低于所设置的level的信息过滤不显示出来--> 
        <param name="Threshold" value="DEBUG" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="%d{yyyy.MM.dd HH:mm:ss SS} %5p [%t] %C{1}.%M(%L) | %m%n" />
        </layout>
    </appender>
    
    <!-- 系统应用级别日志，日志达到一定大小后，产生新的问题 -->
    <appender name="fileMaxAppenderAll" class="org.apache.log4j.RollingFileAppender">
        <param name="threshold" value="error" />
        <param name="file" value="E:/logs/all.sys.log" />
        <param name="maxFileSize" value="10M" />
        <param name="maxBackupIndex" value="5" />
        <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 --> 
        <param name="append" value="true" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%-5p][%d{yyyy-MM-dd HH:mm:ss,SSS}][%c] :%m%n" />
        </layout>
    </appender>
 
    <!--输出到文件 所有日志，根据name='DatePattern'设置每隔多久分割成一个新文件 -->
    <appender name="fileAppenderAll" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="E:/logs/all.log" />
        <!-- value的格式，（天，小时，分钟）， 控制每隔多久分割成一个新文件 -->
        <param name="DatePattern" value=".yyyy-MM-dd-HH" />
        <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 --> 
        <param name="append" value="true" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="%d{yyyy.MM.dd HH:mm:ss SS} %5p [%t] %C{1}.%M(%L) | %m%n" />
        </layout>
    </appender>
    
    <!--输出到错误日志文件，只要加上filter过滤标签即可输出指定级别的日志  -->
    <appender name="fileAppenderError" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="E:/logs/error.log" />
        <param name="DatePattern" value=".yyyy-MM-dd-HH" />
        <param name="Append" value="true" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="%d{yyyy.MM.dd HH:mm:ss SS} %5p [%t] %C{1}.%M(%L) | %m%n" />
        </layout>
        <!-- 日志级别，必须LevelMin <= LevelMax ,否则不输出日志 -->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="LevelMin" value="ERROR" />
            <param name="LevelMax" value="ERROR" />
        </filter>
    </appender>
    
    <!-- 输出sql日志文件 -->
    <appender name="fileSql" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="E:/logs/sql.log" />
        <param name="DatePattern" value=".yyyy-MM-dd-HH" />
        <param name="Append" value="true" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern"
                value="%d{yyyy.MM.dd HH:mm:ss SS} %5p [%t] %C{1}.%M(%L) | %m%n" />
        </layout>
        <!-- 日志级别，必须LevelMin <= LevelMax ,否则不输出日志 -->
        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="LevelMin" value="DEBUG" />
            <param name="LevelMax" value="ERROR" />
        </filter>
    </appender>
 
    <!-- 打印sql文件  -->
    <category name="com.yw.mapper" additivity="true">
        <priority value="DEBUG" />
        <appender-ref ref="fileSql" />
    </category>
    <category name="org.apache.mybatis">  
        <priority value="DEBUG" />  
        <appender-ref ref="fileSql" />
    </category>
    <category name="org.mybatis.spring">  
        <priority value="DEBUG" />  
        <appender-ref ref="fileSql" />
    </category>
 
    <root>
        <priority value="DEBUG" />
        <appender-ref ref="consoleAppender" />
        <appender-ref ref="fileAppenderAll" />
        <appender-ref ref="fileAppenderError" />
    </root>
</log4j:configuration>